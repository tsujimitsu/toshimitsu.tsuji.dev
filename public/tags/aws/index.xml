<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on tsujimitsu.tsuji.dev</title>
    <link>https://toshimitsu.tsuji.dev/tags/aws/</link>
    <description>Recent content in aws on tsujimitsu.tsuji.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 29 Aug 2017 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://toshimitsu.tsuji.dev/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS IoT</title>
      <link>https://toshimitsu.tsuji.dev/posts/aws-iot/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://toshimitsu.tsuji.dev/posts/aws-iot/</guid>
      <description> 使い方  AWS IoT 今すぐ始める 接続 -&amp;gt; デバイスの設定 今すぐ始める Linux/OSX, Node.js 接続キットのダウンロード 以下をデバイスで実行
unzip connect_device_package.zip chmod +x start.sh ./start.sh  登録 -&amp;gt; モノ
 モノの登録
 モノの作成
 セキュリティ -&amp;gt; 証明書の作成
 以下のダウンロード
 このモノの証明書 パブリックキー プライベートキー  有効化
 完了
  </description>
    </item>
    
    <item>
      <title>Python Script on AWS Lambda</title>
      <link>https://toshimitsu.tsuji.dev/posts/python-script-on-aws-lambda/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://toshimitsu.tsuji.dev/posts/python-script-on-aws-lambda/</guid>
      <description> Step1 select blueprint  select &amp;ldquo;Lambda&amp;rdquo; from AWS Management Console select &amp;ldquo;lambda-canary&amp;rdquo;  Step2 configure event sources  Event source type: &amp;quot;Scheduled Event&amp;quot; Name: &amp;quot;foobar&amp;quot; Description: &amp;quot;foobar&amp;quot; Schedule: &amp;quot;rate(5 minutes)&amp;quot;  Step3 configure function  Name: &amp;quot;foobar&amp;quot; Description: &amp;quot;foobar&amp;quot; Runtime: &amp;quot;Python 2.7&amp;quot; function code: &amp;quot;python script&amp;quot; Handler: &amp;quot;lambda_function.lambda_handler&amp;quot; Role: &amp;quot;lambda_basic_execution&amp;quot; Memory(MB): &amp;quot;128&amp;quot; Timeout: &amp;quot;10sec&amp;quot;  reference  AWS Lambda��Python��Schedule���s������  </description>
    </item>
    
    <item>
      <title>HTTPS for AWS ELB(Elastic Load Balancer)</title>
      <link>https://toshimitsu.tsuji.dev/posts/https-for-aws-elb/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://toshimitsu.tsuji.dev/posts/https-for-aws-elb/</guid>
      <description>Introduction  本記事はHZ Colloquium Advent Calendar 2014の12/11分の記事です。 前回記事（Welcome to WebAPI World）の続きとなります。  前回までのあらすじ WebAPIを作ってみたくて色々調べてみたよってところまでは話した。が、実装まではたどりつけませんでした。 せっかくのWebAPIだからロードバランサで可用性担保しつつ、SSLなセキュアAPIを実現！という夢を語りました。
本日のお話 「せっかく」のところを実現してみました。ロードバランサとSSL通信のことです。 具体的にはAWSのロードバランササービス「ELB(Elastic Load Balancer)」の設定と クライアントからのHTTPS通信でのアクセスの実現です。結構ウェブ上に情報はあったので それほど苦労もなく実現できてしまいました。 なお、下記サイトに書いてあることとほぼ同じことをやった感じ。 全て網羅されてまとめられていて大変感謝です。 * AWSのELBにSSLを設定する（Nginx）
おしながき  PayPalへの登録（おまけ） SSL証明書の購入手続き ELBの設定（SSL証明書の導入） ドメインとELBの紐づけ  PayPalへの登録 SSL証明書の購入に必要だった＋初体験ってこともあったので登録してみました。 完璧には仕組みがわかってなかったんですけども、簡単に使えてます。 サービス利点としては、各ネット店舗での購入の際に毎回クレジットカード番号を 入れないといけないのを、一度PayPalにクレジット情報を登録しておけば、 PayPalとネット店舗間でお金のやり取りをやってくれるってところ。 初め理解ができなかったのは、上記以外にも「送金」ができるってところ。 日本の中では銀行以外が送金業務できないので実質は初めに行ったサービスだけ 使えるんだけど、法改正とかあるらしくて近く「送金」できるようになるみたい。 まぁネット上の銀行口座にクレジットから振り込みできるってことかな。 ちなみに、登録にはほぼ迷うことなく完了。
SSL証明書の購入手続き メールアドレスの準備 SSL証明書を購入する際は、正しいドメインの所有者か確認するため（？）に ドメイン名のメールアドレスにメールが送られてくる。 admin@codelogue.com とかを用意する（SSL証明書購入時に いくつか選択肢がでてくるので、それを確認してから作成でもよい） なお、独自ドメインで無料メールアドレスを持とうとすると、意外と狭き道だった。 （運よく昔作ったGoogle Appsのアカウントが有効だったため助かった）
CSRの作成 AWSのELBに証明書を登録するためにはパスフレーズなしにする必要がある。
# 秘密鍵の作成（パスフレーズは適当に） openssl genrsa -des3 -out aws-elb.key.pem 2048 # 秘密鍵からパスフレーズを削除 openssl rsa -in aws-elb.</description>
    </item>
    
    <item>
      <title>Middleman to Amazon S3</title>
      <link>https://toshimitsu.tsuji.dev/posts/middleman-to-amazon-s3/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0900</pubDate>
      
      <guid>https://toshimitsu.tsuji.dev/posts/middleman-to-amazon-s3/</guid>
      <description>AWS にデプロイ用ユーザを作成  IAM(Identity and Access Management)でTravis CIからのデプロイ用ユーザ作成 デプロイ用ユーザにAmazon S3更新権限を付与（Attach User PolicyからAmazon S3 Full Access)  Amazon S3 にバケツ（公開用フォルダ）作成  Amazon S3にバケツを作成。PropertiesからStatic Website HostingをEnable website hostingにする。 Index Documentにindex.htmlを指定  Travis CI の設定 AWSデプロイ用ユーザ作成時のAccess Key IDを暗号化
# travis encrypt -r tsujimitsu/codelogue *********** Please add the following to your .travis.yml file: secure: &amp;quot;**********&amp;quot;  同じ要領でSecret Access Keyも暗号化（-rの後ろはgithubのリポジトリを指定）
travis encrypt -r tsujimitsu/codelogue ********** Please add the following to your .travis.yml file: secure: &amp;quot;**********&amp;quot;  travis.</description>
    </item>
    
  </channel>
</rss>